package karel;

import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.Timer;



/**
 *
 * @author Allen
 */
public class KarelFrame extends javax.swing.JFrame {
    
    

    /**
     * Creates new form KarelFrame
     */
    public KarelFrame() {
        initComponents();
        editInitUI();
        
 
    }

    private void editInitUI(){
        currentLevelName = "maps/grid6.txt";
        jLabel1.setText("Map 6");
        
        BoardPanel = new Board(currentLevelName, theme);
        
        BoardPanel.setSize((BoardPanel.getBoardWidth() + OFFSET), (BoardPanel.getBoardHeight() + OFFSET));
        //add(BoardPanel, -1);
        
        ActionPanel.add(BoardPanel, -1);
        PlayerInfoTextArea.setText(BoardPanel.PlayerInfo());
        
        ProgrammingTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            
            @Override
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ProgrammingTabbedPaneStateChanged(evt);
            }
        });
        
        timer = new Timer(500, null);
        setLocationRelativeTo(null);
        setTitle("Karel the Robot");
        
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new javax.swing.JScrollBar();
        EditPopupMenu = new javax.swing.JPopupMenu();
        CopyPopout = new javax.swing.JMenuItem();
        CutPopout = new javax.swing.JMenuItem();
        DeletePopout = new javax.swing.JMenuItem();
        PastePopout = new javax.swing.JMenuItem();
        ActionPanel = new javax.swing.JPanel();
        StatusBarPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ProgramPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        PlayerInfoTextArea = new javax.swing.JTextArea();
        ProgrammingTabbedPane = new javax.swing.JTabbedPane();
        ManualPanel = new javax.swing.JPanel();
        GoButton = new javax.swing.JButton();
        LeftButton = new javax.swing.JButton();
        RightButton = new javax.swing.JButton();
        PutButton = new javax.swing.JButton();
        GetButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        CodeTextArea = new javax.swing.JTextArea();
        ExecuteButton = new javax.swing.JButton();
        StopButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        QuitMenuItem = new javax.swing.JMenuItem();
        CodeMenu = new javax.swing.JMenu();
        NewMenuItem = new javax.swing.JMenuItem();
        OpenMenuItem = new javax.swing.JMenuItem();
        SaveMenuItem = new javax.swing.JMenuItem();
        SaveAsMenuItem = new javax.swing.JMenuItem();
        EditMenu = new javax.swing.JMenu();
        CutMenuItem = new javax.swing.JMenuItem();
        CopyMenuItem = new javax.swing.JMenuItem();
        PasteMenuItem = new javax.swing.JMenuItem();
        DeleteMenuItem = new javax.swing.JMenuItem();
        LevelMenu = new javax.swing.JMenu();
        LoadLevelMenuItem = new javax.swing.JMenuItem();
        RestartLevelMenuItem = new javax.swing.JMenuItem();
        MapsMenu = new javax.swing.JMenu();
        Map1MenuItem = new javax.swing.JMenuItem();
        Map2MenuItem = new javax.swing.JMenuItem();
        Map3MenuItem = new javax.swing.JMenuItem();
        Map4MenuItem = new javax.swing.JMenuItem();
        Map5MenuItem = new javax.swing.JMenuItem();
        Map6MenuItem = new javax.swing.JMenuItem();
        FunMenu = new javax.swing.JMenu();
        ThemeMenu = new javax.swing.JMenu();
        DefaultMenuItem = new javax.swing.JMenuItem();
        MarioMenu = new javax.swing.JMenu();
        MarioMenuItem = new javax.swing.JMenuItem();
        LuigiMenuItem = new javax.swing.JMenuItem();
        YoshiMenuItem = new javax.swing.JMenuItem();
        ToadMenuItem = new javax.swing.JMenuItem();
        Batman = new javax.swing.JMenu();
        Batman1MenuItem = new javax.swing.JMenuItem();
        Batman2MenuItem = new javax.swing.JMenuItem();
        HelpMenu = new javax.swing.JMenu();
        AboutMenuItem = new javax.swing.JMenuItem();

        CopyPopout.setText("Copy");
        CopyPopout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyPopoutActionPerformed(evt);
            }
        });
        EditPopupMenu.add(CopyPopout);

        CutPopout.setText("Cut");
        CutPopout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CutPopoutActionPerformed(evt);
            }
        });
        EditPopupMenu.add(CutPopout);

        DeletePopout.setText("Delete");
        DeletePopout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletePopoutActionPerformed(evt);
            }
        });
        EditPopupMenu.add(DeletePopout);

        PastePopout.setText("Paste");
        PastePopout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PastePopoutActionPerformed(evt);
            }
        });
        EditPopupMenu.add(PastePopout);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        ActionPanel.setAutoscrolls(true);
        ActionPanel.setName(""); // NOI18N

        javax.swing.GroupLayout ActionPanelLayout = new javax.swing.GroupLayout(ActionPanel);
        ActionPanel.setLayout(ActionPanelLayout);
        ActionPanelLayout.setHorizontalGroup(
            ActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 544, Short.MAX_VALUE)
        );
        ActionPanelLayout.setVerticalGroup(
            ActionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel1.setText("jLabel1");

        javax.swing.GroupLayout StatusBarPanelLayout = new javax.swing.GroupLayout(StatusBarPanel);
        StatusBarPanel.setLayout(StatusBarPanelLayout);
        StatusBarPanelLayout.setHorizontalGroup(
            StatusBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(StatusBarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 688, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(182, Short.MAX_VALUE))
        );
        StatusBarPanelLayout.setVerticalGroup(
            StatusBarPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, StatusBarPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        PlayerInfoTextArea.setColumns(20);
        PlayerInfoTextArea.setRows(5);
        PlayerInfoTextArea.setFocusable(false);
        jScrollPane2.setViewportView(PlayerInfoTextArea);

        GoButton.setText("GO");
        GoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GoButtonActionPerformed(evt);
            }
        });

        LeftButton.setText("LEFT");
        LeftButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LeftButtonActionPerformed(evt);
            }
        });

        RightButton.setText("Right");
        RightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RightButtonActionPerformed(evt);
            }
        });

        PutButton.setText("PUT");
        PutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PutButtonActionPerformed(evt);
            }
        });

        GetButton.setText("GET");
        GetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ManualPanelLayout = new javax.swing.GroupLayout(ManualPanel);
        ManualPanel.setLayout(ManualPanelLayout);
        ManualPanelLayout.setHorizontalGroup(
            ManualPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ManualPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(LeftButton, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(ManualPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ManualPanelLayout.createSequentialGroup()
                        .addComponent(GetButton, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(RightButton, javax.swing.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                    .addGroup(ManualPanelLayout.createSequentialGroup()
                        .addGroup(ManualPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(GoButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(75, 75, 75)))
                .addGap(43, 43, 43))
        );
        ManualPanelLayout.setVerticalGroup(
            ManualPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ManualPanelLayout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(GoButton, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(ManualPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(RightButton, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                    .addComponent(GetButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(LeftButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(PutButton, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                .addGap(112, 112, 112))
        );

        ProgrammingTabbedPane.addTab("Manual", ManualPanel);

        CodeTextArea.setColumns(20);
        CodeTextArea.setFont(new java.awt.Font("Times New Roman", 0, 13)); // NOI18N
        CodeTextArea.setRows(5);
        CodeTextArea.setTabSize(4);
        CodeTextArea.setDragEnabled(true);
        CodeTextArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                CodeTextAreaMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(CodeTextArea);

        ProgrammingTabbedPane.addTab("Programming", jScrollPane1);

        ExecuteButton.setText("Execute");
        ExecuteButton.setEnabled(false);
        ExecuteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExecuteButtonActionPerformed(evt);
            }
        });

        StopButton.setText("Stop");
        StopButton.setEnabled(false);
        StopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ProgramPanelLayout = new javax.swing.GroupLayout(ProgramPanel);
        ProgramPanel.setLayout(ProgramPanelLayout);
        ProgramPanelLayout.setHorizontalGroup(
            ProgramPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProgramPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ProgramPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ProgrammingTabbedPane)
                    .addComponent(jScrollPane2)
                    .addGroup(ProgramPanelLayout.createSequentialGroup()
                        .addComponent(ExecuteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(StopButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        ProgramPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ExecuteButton, StopButton});

        ProgramPanelLayout.setVerticalGroup(
            ProgramPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ProgramPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ProgrammingTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ProgramPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ExecuteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StopButton))
                .addGap(25, 25, 25)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        ProgramPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ExecuteButton, StopButton});

        FileMenu.setText("File");

        QuitMenuItem.setText("Quit");
        QuitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuitMenuItemActionPerformed(evt);
            }
        });
        FileMenu.add(QuitMenuItem);

        jMenuBar1.add(FileMenu);

        CodeMenu.setText("Code");

        NewMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        NewMenuItem.setText("New");
        NewMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewMenuItemActionPerformed(evt);
            }
        });
        CodeMenu.add(NewMenuItem);

        OpenMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        OpenMenuItem.setText("Open");
        OpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenMenuItemActionPerformed(evt);
            }
        });
        CodeMenu.add(OpenMenuItem);

        SaveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        SaveMenuItem.setText("Save");
        SaveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveMenuItemActionPerformed(evt);
            }
        });
        CodeMenu.add(SaveMenuItem);

        SaveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        SaveAsMenuItem.setText("Save As");
        SaveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveAsMenuItemActionPerformed(evt);
            }
        });
        CodeMenu.add(SaveAsMenuItem);

        jMenuBar1.add(CodeMenu);

        EditMenu.setText("Edit");

        CutMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        CutMenuItem.setText("Cut");
        CutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CutMenuItemActionPerformed(evt);
            }
        });
        EditMenu.add(CutMenuItem);

        CopyMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        CopyMenuItem.setText("Copy");
        CopyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyMenuItemActionPerformed(evt);
            }
        });
        EditMenu.add(CopyMenuItem);

        PasteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        PasteMenuItem.setText("Paste");
        PasteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasteMenuItemActionPerformed(evt);
            }
        });
        EditMenu.add(PasteMenuItem);

        DeleteMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        DeleteMenuItem.setText("Delete");
        DeleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteMenuItemActionPerformed(evt);
            }
        });
        EditMenu.add(DeleteMenuItem);

        jMenuBar1.add(EditMenu);

        LevelMenu.setText("Level");

        LoadLevelMenuItem.setText("Load From File");
        LoadLevelMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadLevelMenuItemActionPerformed(evt);
            }
        });
        LevelMenu.add(LoadLevelMenuItem);

        RestartLevelMenuItem.setText("Restart");
        RestartLevelMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestartLevelMenuItemActionPerformed(evt);
            }
        });
        LevelMenu.add(RestartLevelMenuItem);

        MapsMenu.setText("Maps");

        Map1MenuItem.setText("Map 1");
        Map1MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Map1MenuItemActionPerformed(evt);
            }
        });
        MapsMenu.add(Map1MenuItem);

        Map2MenuItem.setText("Map 2");
        Map2MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Map2MenuItemActionPerformed(evt);
            }
        });
        MapsMenu.add(Map2MenuItem);

        Map3MenuItem.setText("Map 3");
        Map3MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Map3MenuItemActionPerformed(evt);
            }
        });
        MapsMenu.add(Map3MenuItem);

        Map4MenuItem.setText("Map 4");
        Map4MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Map4MenuItemActionPerformed(evt);
            }
        });
        MapsMenu.add(Map4MenuItem);

        Map5MenuItem.setText("Map 5");
        Map5MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Map5MenuItemActionPerformed(evt);
            }
        });
        MapsMenu.add(Map5MenuItem);

        Map6MenuItem.setText("Map 6");
        Map6MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Map6MenuItemActionPerformed(evt);
            }
        });
        MapsMenu.add(Map6MenuItem);

        LevelMenu.add(MapsMenu);

        jMenuBar1.add(LevelMenu);

        FunMenu.setText("Fun");

        ThemeMenu.setText("Themes");

        DefaultMenuItem.setText("Default");
        DefaultMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DefaultMenuItemActionPerformed(evt);
            }
        });
        ThemeMenu.add(DefaultMenuItem);

        MarioMenu.setText("Mario");

        MarioMenuItem.setText("Mario");
        MarioMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MarioMenuItemActionPerformed(evt);
            }
        });
        MarioMenu.add(MarioMenuItem);

        LuigiMenuItem.setText("Luigi");
        LuigiMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LuigiMenuItemActionPerformed(evt);
            }
        });
        MarioMenu.add(LuigiMenuItem);

        YoshiMenuItem.setText("Yoshi");
        YoshiMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YoshiMenuItemActionPerformed(evt);
            }
        });
        MarioMenu.add(YoshiMenuItem);

        ToadMenuItem.setText("Toad");
        ToadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ToadMenuItemActionPerformed(evt);
            }
        });
        MarioMenu.add(ToadMenuItem);

        ThemeMenu.add(MarioMenu);

        Batman.setText("Batman");

        Batman1MenuItem.setText("Batman 1");
        Batman1MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Batman1MenuItemActionPerformed(evt);
            }
        });
        Batman.add(Batman1MenuItem);

        Batman2MenuItem.setText("Batman 2");
        Batman2MenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Batman2MenuItemActionPerformed(evt);
            }
        });
        Batman.add(Batman2MenuItem);

        ThemeMenu.add(Batman);

        FunMenu.add(ThemeMenu);

        jMenuBar1.add(FunMenu);

        HelpMenu.setText("Help");

        AboutMenuItem.setText("About");
        AboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutMenuItemActionPerformed(evt);
            }
        });
        HelpMenu.add(AboutMenuItem);

        jMenuBar1.add(HelpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ProgramPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ActionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(StatusBarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ProgramPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ActionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(StatusBarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NewMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewMenuItemActionPerformed
        int ans = JOptionPane.showConfirmDialog(ActionPanel, "Save First?",
                        "Create new file", JOptionPane.YES_NO_OPTION);
        if(ans == JOptionPane.YES_OPTION){
            FileOperations fo = new FileOperations(CodeTextArea.getText(), currentFileName);
            if(currentFileName.isEmpty()){
                JFileChooser chooser = new JFileChooser();
                int returnVal = chooser.showSaveDialog(this);

                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    File file = chooser.getSelectedFile();
                    currentFileName = file.getAbsolutePath();
                    fo.setFileName(file.getAbsolutePath());
                    fo.save();   
                }
            }
            
        }
        else if(ans == JOptionPane.NO_OPTION){
            currentFileName = "";
            CodeTextArea.setText("");
        }
        else{
            
        }
        
    }//GEN-LAST:event_NewMenuItemActionPerformed

    private void SaveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveMenuItemActionPerformed
        FileOperations fo = new FileOperations(CodeTextArea.getText(), currentFileName);
        
        if(currentFileName.isEmpty()){
            JFileChooser chooser = new JFileChooser();
            int returnVal = chooser.showSaveDialog(this);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = chooser.getSelectedFile();
                currentFileName = file.getAbsolutePath();
                fo.setFileName(file.getAbsolutePath());
                fo.save();   
            }
        }
        else{
            fo.save();
        }
    }//GEN-LAST:event_SaveMenuItemActionPerformed

    private void SaveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveAsMenuItemActionPerformed
        
        FileOperations fo = new FileOperations(CodeTextArea.getText(), currentFileName);
        
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showSaveDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            currentFileName = file.getAbsolutePath();
            fo.setFileName(file.getAbsolutePath());
            fo.save();   
        }
                                                   
    }//GEN-LAST:event_SaveAsMenuItemActionPerformed

    private void OpenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenMenuItemActionPerformed
        ProgrammingTabbedPane.setSelectedIndex(1);
        FileOperations fo = new FileOperations(CodeTextArea.getText(), currentFileName);
        
        //Create a file chooser
        final JFileChooser chooser = new JFileChooser();
        
        //In response to a button click:
        int returnVal = chooser.showOpenDialog(this);
        
        
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = chooser.getSelectedFile();
                currentFileName = file.getAbsolutePath();
                fo.setFileName(file.getAbsolutePath());
                CodeTextArea.setText(fo.open());
            } 
    }//GEN-LAST:event_OpenMenuItemActionPerformed

    private void CopyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyMenuItemActionPerformed
        EditOperations eo = new EditOperations();
        eo.copy(CodeTextArea.getSelectedText());
    }//GEN-LAST:event_CopyMenuItemActionPerformed

    private void DeleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteMenuItemActionPerformed
        CodeTextArea.replaceSelection("");
    }//GEN-LAST:event_DeleteMenuItemActionPerformed

    private void PasteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasteMenuItemActionPerformed
         EditOperations eo = new EditOperations();
         CodeTextArea.replaceSelection(eo.paste());
    }//GEN-LAST:event_PasteMenuItemActionPerformed

    private void CutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CutMenuItemActionPerformed

        EditOperations eo = new EditOperations();
        eo.copy(CodeTextArea.getSelectedText());
        CodeTextArea.replaceSelection("");
    }//GEN-LAST:event_CutMenuItemActionPerformed

    private void CodeTextAreaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CodeTextAreaMousePressed
        if(SwingUtilities.isRightMouseButton(evt)){
            EditPopupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_CodeTextAreaMousePressed

    private void CopyPopoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyPopoutActionPerformed
        EditOperations eo = new EditOperations();
        eo.copy(CodeTextArea.getSelectedText());
    }//GEN-LAST:event_CopyPopoutActionPerformed

    private void CutPopoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CutPopoutActionPerformed
        EditOperations eo = new EditOperations();
        eo.copy(CodeTextArea.getSelectedText());
        CodeTextArea.replaceSelection("");
    }//GEN-LAST:event_CutPopoutActionPerformed

    private void DeletePopoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeletePopoutActionPerformed
        CodeTextArea.replaceSelection("");
    }//GEN-LAST:event_DeletePopoutActionPerformed

    private void PastePopoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PastePopoutActionPerformed
        EditOperations eo = new EditOperations();
        CodeTextArea.replaceSelection(eo.paste());
    }//GEN-LAST:event_PastePopoutActionPerformed

    private void LoadLevelMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadLevelMenuItemActionPerformed
        if(timer.isRunning()){
            clearTimer();
        }
        
        //Create a file chooser
        final JFileChooser chooser = new JFileChooser();
        
        //In response to a button click:
        int returnVal = chooser.showOpenDialog(this);
        
        
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = chooser.getSelectedFile();
                currentLevelName = file.getAbsolutePath();
                createNewPanel();
                jLabel1.setText("Custom Map");
            } 
    }//GEN-LAST:event_LoadLevelMenuItemActionPerformed

    private void RestartLevelMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestartLevelMenuItemActionPerformed
        clearTimer();
        BoardPanel.restartLevel(true);
        PlayerInfoTextArea.setText(BoardPanel.PlayerInfo());
        
        
    }//GEN-LAST:event_RestartLevelMenuItemActionPerformed

    private void GoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GoButtonActionPerformed
         pressAKey('w');
    }//GEN-LAST:event_GoButtonActionPerformed

    private void LeftButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LeftButtonActionPerformed
        pressAKey('a');
    }//GEN-LAST:event_LeftButtonActionPerformed

    private void RightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RightButtonActionPerformed
        pressAKey('d');
    }//GEN-LAST:event_RightButtonActionPerformed

    private void GetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GetButtonActionPerformed
        pressAKey('e');
    }//GEN-LAST:event_GetButtonActionPerformed

    private void PutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PutButtonActionPerformed
        pressAKey('s');
        
    }//GEN-LAST:event_PutButtonActionPerformed

    private void ExecuteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExecuteButtonActionPerformed
        ProgrammerMode pm = new ProgrammerMode(CodeTextArea.getText(), BoardPanel);
        
        
        pm.Start();
        keyChars = pm.getKeyInstructions();
        
        
        ActionListener taskPerformer = new ActionListener() {
             int i;
             
           @Override
            public void actionPerformed(ActionEvent evt) {
                if(timer.isRunning()){
                    if((!keyChars.isEmpty()) && (!BoardPanel.ReturnCrashState())){
                        pressAKey(keyChars.get(0));
                        PlayerInfoTextArea.setText(BoardPanel.PlayerInfo());
                        keyChars.remove(0);
                    }
                    else{
                        timer.stop();
                        keyChars.clear();
                        ExecuteButton.setEnabled(false);
                        StopButton.setEnabled(false);
       
                        if(!BoardPanel.isManualMode()){
                            if( (!BoardPanel.checkCompleted()) && (!BoardPanel.ReturnCrashState()) && keyChars.isEmpty() ){
                                JOptionPane.showMessageDialog(null, "You have not completed the level. Restart and try again", "Incomplete", JOptionPane.INFORMATION_MESSAGE);
                            }
                        }
                        
                    }//end else

                }//end timer running if
                
            }
        };

       timer = new Timer(500, taskPerformer); 
      
      
      if(!keyChars.isEmpty()){
         ExecuteButton.setEnabled(false);
         timer.start();
         StopButton.setEnabled(true);
         setManualButtons(false);
       /*  for(int i=0; i<keyChars.size(); i++){
            pressAKey(keyChars.get(i));
            
        } */
          
      }
      else{
          PlayerInfoTextArea.setText(pm.getErrorStatements());
      }
   
    }//GEN-LAST:event_ExecuteButtonActionPerformed

    private void Map1MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Map1MenuItemActionPerformed
        if(timer.isRunning()){
            clearTimer();
        }
        currentLevelName = "maps/grid1.txt";
        createNewPanel();
        jLabel1.setText("Map 1");
    }//GEN-LAST:event_Map1MenuItemActionPerformed

    private void Map2MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Map2MenuItemActionPerformed
        if(timer.isRunning()){
            clearTimer();
        }
        currentLevelName = "maps/grid2.txt";
        createNewPanel();
        jLabel1.setText("Map 2");
    }//GEN-LAST:event_Map2MenuItemActionPerformed

    private void Map3MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Map3MenuItemActionPerformed
        if(timer.isRunning()){
            clearTimer();
        }
        currentLevelName = "maps/grid3.txt";
        createNewPanel();
        jLabel1.setText("Map 3");
    }//GEN-LAST:event_Map3MenuItemActionPerformed

    private void Map4MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Map4MenuItemActionPerformed
        if(timer.isRunning()){
            clearTimer();
        }
        currentLevelName = "maps/grid4.txt";
        createNewPanel();
        jLabel1.setText("Map 4");
    }//GEN-LAST:event_Map4MenuItemActionPerformed

    private void Map5MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Map5MenuItemActionPerformed
        if(timer.isRunning()){
            clearTimer();
        }
        currentLevelName = "maps/grid5.txt";
        createNewPanel();
        jLabel1.setText("Map 5");
    }//GEN-LAST:event_Map5MenuItemActionPerformed

    private void Map6MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Map6MenuItemActionPerformed
        if(timer.isRunning()){
            clearTimer();
        }
        currentLevelName = "maps/grid6.txt";
        createNewPanel();
        jLabel1.setText("Map 6");
    }//GEN-LAST:event_Map6MenuItemActionPerformed

    private void DefaultMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DefaultMenuItemActionPerformed
        theme = DEFAULT;
        BoardPanel.setTheme(DEFAULT);
        BoardPanel.repaint();
    }//GEN-LAST:event_DefaultMenuItemActionPerformed

    private void Batman1MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Batman1MenuItemActionPerformed
        theme = BATMAN1;
        BoardPanel.setTheme(BATMAN1);
        BoardPanel.repaint();
    }//GEN-LAST:event_Batman1MenuItemActionPerformed

    private void Batman2MenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Batman2MenuItemActionPerformed
        theme = BATMAN2;
        BoardPanel.setTheme(BATMAN2);
        BoardPanel.repaint();
    }//GEN-LAST:event_Batman2MenuItemActionPerformed

    private void MarioMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MarioMenuItemActionPerformed
        theme = MARIO;
        BoardPanel.setTheme(MARIO);
        BoardPanel.repaint();
    }//GEN-LAST:event_MarioMenuItemActionPerformed

    private void LuigiMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LuigiMenuItemActionPerformed
        theme = LUIGI;
        BoardPanel.setTheme(LUIGI);
        BoardPanel.repaint();
    }//GEN-LAST:event_LuigiMenuItemActionPerformed

    private void YoshiMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YoshiMenuItemActionPerformed
        theme = YOSHI;
        BoardPanel.setTheme(YOSHI);
        BoardPanel.repaint();
    }//GEN-LAST:event_YoshiMenuItemActionPerformed

    private void ToadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ToadMenuItemActionPerformed
        theme = TOAD;
        BoardPanel.setTheme(TOAD);
        BoardPanel.repaint();
    }//GEN-LAST:event_ToadMenuItemActionPerformed

    private void QuitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_QuitMenuItemActionPerformed

    private void StopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopButtonActionPerformed
        if(timer.isRunning()){
            clearTimer();
            setManualButtons(true);
        }
    }//GEN-LAST:event_StopButtonActionPerformed

    private void AboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutMenuItemActionPerformed
           try {  
                Desktop.getDesktop().open(new File("KarelMainDocu.txt"));
                }  
              catch(Exception e) {  
                e.printStackTrace();          
                }  
    }//GEN-LAST:event_AboutMenuItemActionPerformed

    private void ProgrammingTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt){
        if(!timer.isRunning()){
            resetBoardPanelComponents();
        }
    }
    
    /**
     * Resets the UI to the correct state depending on which tab is selected
     */ 
    private void resetBoardPanelComponents(){
        int index = ProgrammingTabbedPane.getSelectedIndex();

        if(index == 0){
            ExecuteButton.setEnabled(false);
            BoardPanel.setManualMode(true);
            setManualButtons(true);
            PlayerInfoTextArea.setText(BoardPanel.PlayerInfo());    
        }
       
        else if(index == 1){
            ExecuteButton.setEnabled(true);
            BoardPanel.setManualMode(false);
            PlayerInfoTextArea.setText(BoardPanel.PlayerInfo());    
        }
        ActionPanel.repaint();
    }
    
    /**
     * Create a new board based on the selected tab
     */
    public void createNewPanel(){
        int index = ProgrammingTabbedPane.getSelectedIndex();
        
        if(index == 0){
            ExecuteButton.setEnabled(false);
            ActionPanel.remove(BoardPanel);
            ActionPanel.repaint();
            BoardPanel = new Board(currentLevelName, theme);
            BoardPanel.setSize((BoardPanel.getBoardWidth() + OFFSET), (BoardPanel.getBoardHeight() + OFFSET));
            BoardPanel.setManualMode(true);
            ActionPanel.add(BoardPanel, -1);
            PlayerInfoTextArea.setText(BoardPanel.PlayerInfo());    
        }
       
        if(index == 1){
            ExecuteButton.setEnabled(true);
            ActionPanel.remove(BoardPanel);
            ActionPanel.repaint();
            BoardPanel = new Board(currentLevelName, theme);;
            BoardPanel.setSize((BoardPanel.getBoardWidth() + OFFSET), (BoardPanel.getBoardHeight() + OFFSET));
            BoardPanel.setManualMode(false);
            ActionPanel.add(BoardPanel, -1);
            PlayerInfoTextArea.setText(BoardPanel.PlayerInfo());    
        }
    }

    /**
     * Send an instruction to the board to be executed.
     * @param key Instruction to be executed
     */
    private void pressAKey(char key){
        BoardPanel.keyPressed(key);
        PlayerInfoTextArea.setText(BoardPanel.PlayerInfo());
        
        if(BoardPanel.ReturnCrashState()){
            JOptionPane.showMessageDialog(null, "You have crashed. Restart or load a new level", "Crashed",  JOptionPane.INFORMATION_MESSAGE);
        }
        
        else if(BoardPanel.checkCompleted()){
            JOptionPane.showMessageDialog(null, "You have completed the level. Restart or load a new level", "Completed", JOptionPane.INFORMATION_MESSAGE);
        }
        
    }
    
    /**
     * Set the enabled states of the manual mode buttons
     * @param b State to set buttons
     */
    private void setManualButtons(boolean b){
        GoButton.setEnabled(b);
        GetButton.setEnabled(b);
        PutButton.setEnabled(b);
        LeftButton.setEnabled(b);
        RightButton.setEnabled(b);
        
    }
    
    /**
     * Resets the ActionListener properties user to display proper movement and resets components on the main frame 
     */
    private void clearTimer(){
        timer.stop();
        keyChars.clear();
        resetBoardPanelComponents();
        if(BoardPanel.isManualMode()){
            ExecuteButton.setEnabled(false);
            StopButton.setEnabled(false);
        }
        else{
            ExecuteButton.setEnabled(true);
            StopButton.setEnabled(false);
        }
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(KarelFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(KarelFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(KarelFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(KarelFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new KarelFrame().setVisible(true);
            }
        });
    }
    
    private String currentFileName = new String();
    final Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
    private String currentLevelName = new String();
    ArrayList<Character> keyChars = new ArrayList();
    private Board BoardPanel;
    private Timer timer;
    private final int OFFSET = 0;
    private int theme = 0;
    private final int MARIO = 1;
    private final int DEFAULT = 0;
    private final int BATMAN1 = 2;
    private final int  BATMAN2 = 3;
    private final int  LUIGI = 4;
    private final int  YOSHI = 5;
    private final int  TOAD = 6;
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutMenuItem;
    private javax.swing.JPanel ActionPanel;
    private javax.swing.JMenu Batman;
    private javax.swing.JMenuItem Batman1MenuItem;
    private javax.swing.JMenuItem Batman2MenuItem;
    private javax.swing.JMenu CodeMenu;
    private javax.swing.JTextArea CodeTextArea;
    private javax.swing.JMenuItem CopyMenuItem;
    private javax.swing.JMenuItem CopyPopout;
    private javax.swing.JMenuItem CutMenuItem;
    private javax.swing.JMenuItem CutPopout;
    private javax.swing.JMenuItem DefaultMenuItem;
    private javax.swing.JMenuItem DeleteMenuItem;
    private javax.swing.JMenuItem DeletePopout;
    private javax.swing.JMenu EditMenu;
    private javax.swing.JPopupMenu EditPopupMenu;
    private javax.swing.JButton ExecuteButton;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenu FunMenu;
    private javax.swing.JButton GetButton;
    private javax.swing.JButton GoButton;
    private javax.swing.JMenu HelpMenu;
    private javax.swing.JButton LeftButton;
    private javax.swing.JMenu LevelMenu;
    private javax.swing.JMenuItem LoadLevelMenuItem;
    private javax.swing.JMenuItem LuigiMenuItem;
    private javax.swing.JPanel ManualPanel;
    private javax.swing.JMenuItem Map1MenuItem;
    private javax.swing.JMenuItem Map2MenuItem;
    private javax.swing.JMenuItem Map3MenuItem;
    private javax.swing.JMenuItem Map4MenuItem;
    private javax.swing.JMenuItem Map5MenuItem;
    private javax.swing.JMenuItem Map6MenuItem;
    private javax.swing.JMenu MapsMenu;
    private javax.swing.JMenu MarioMenu;
    private javax.swing.JMenuItem MarioMenuItem;
    private javax.swing.JMenuItem NewMenuItem;
    private javax.swing.JMenuItem OpenMenuItem;
    private javax.swing.JMenuItem PasteMenuItem;
    private javax.swing.JMenuItem PastePopout;
    private javax.swing.JTextArea PlayerInfoTextArea;
    private javax.swing.JPanel ProgramPanel;
    private javax.swing.JTabbedPane ProgrammingTabbedPane;
    private javax.swing.JButton PutButton;
    private javax.swing.JMenuItem QuitMenuItem;
    private javax.swing.JMenuItem RestartLevelMenuItem;
    private javax.swing.JButton RightButton;
    private javax.swing.JMenuItem SaveAsMenuItem;
    private javax.swing.JMenuItem SaveMenuItem;
    private javax.swing.JPanel StatusBarPanel;
    private javax.swing.JButton StopButton;
    private javax.swing.JMenu ThemeMenu;
    private javax.swing.JMenuItem ToadMenuItem;
    private javax.swing.JMenuItem YoshiMenuItem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
